- name: sleep for 60 seconds and continue with play
  wait_for: timeout=2

- name: Create a User `"{{ user }}"` for all our Hadoop Modules.
  user: name={{ user }} password={{ password }}

- name: Collecting Private IP address
  shell: "aws --region {{ REGION }} ec2 describe-instances --filters \"Name=tag:{{ ec2_tag_key }},Values={{ ec2_tag_value }}\" \"Name=network-interface.addresses.private-ip-address,Values=*\" --query 'Reservations[*].Instances[*].{InstanceId:InstanceId,PrivateDnsName:PrivateDnsName,State:State.Name, IP:NetworkInterfaces[0].PrivateIpAddress}'|grep -w IP|cut -d ':' -f 2|tr -d ','|tr -d '\"'|sed 's/ //g'"
  register: private_ips
- debug:
    msg: "{{ private_ips.stdout_lines }}"

# #- name: Install JDK on Zookeeper instances
# # Install JDK 1.7 and perform other bootstrap tasks
# - name: JDK | Oracle JDK | Make sure openjdk is uninstalled
#   apt: pkg=openjdk-6-jdk state=absent

# - name: JDK | Oracle JDK | Make sure openjdk is uninstalled
#   apt: pkg=openjdk-7-jdk state=absent

# - name: JDK | Oracle JDK | Make sure openjdk is uninstalled
#   apt: pkg=openjdk-8-jdk state=absent

# - name: JDK | Oracle JDK | Make a directory that holds the Java binaries
#   file: path=/usr/local/java state=directory

# - name: Download JDK
#   get_url: url={{ jdk_archive_url }} dest=/mnt/{{ jdk_archive_filename }} mode=0644 validate_certs=no headers='Cookie:oraclelicense=accept-securebackup-cookie'

# - name: JDK | Oracle JDK | Unpack the compressed JDK binaries
#   shell: "tar -xvzf /mnt/{{ jdk_archive_filename }} -C /usr/local/java creates=/usr/local/java/{{ jdk_version }}"

# - name: JDK | Oracle JDK | Update the symbolic link to the JDK install
#   file: path={{ java_home }} src=/usr/local/java/{{ jdk_version }} state=link force=yes

# - name: JDK | Oracle JDK | Add the JDK binaries to the system path (/etc/profile)
#   lineinfile: dest=/etc/profile regexp='^JAVA_HOME={{java_home}}' line="JAVA_HOME={{java_home}}" state=present

# - name: JDK | Oracle JDK | Add the JDK binaries to the system path (/etc/profile)
#   lineinfile: dest=/etc/profile regexp='^PATH=.*JAVA_HOME.*' line="PATH=$PATH:$HOME/bin:$JAVA_HOME/bin" state=present

# - name: Remove alternatives before we set them.
#   command: rm -f /var/lib/alternatives/{{ item }}
#   with_items:
#     - java
#     - javac
#     - javaws
#     - javah
#     - jar
#     - jps

# - name: JDK | Oracle JDK | Inform the system where Oracle JDK is located
#   alternatives: name={{ item }} link=/usr/bin/{{ item }} path=/usr/local/java/jdk/bin/{{ item }}
#   with_items:
#     - java
#     - javac
#     - javaws
#     - javah
#     - jar
#     - jps

###  Zookeeper
# Download Zookeeper
- name: Download Zookeeper
  get_url: url={{ url}}/{{ zookeeper_file_name }}-bin.tar.gz dest=/mnt/{{ zookeeper_file_name }}-bin.tar.gz mode=0644 validate_certs=no

# unarchive - Copy tgz file and extract in destination.
- name: Copy and UnArchive the Package in Destination Server.
  unarchive: creates={{ install_base_path }}/{{ zookeeper_file_name }}-bin src=/mnt/{{ zookeeper_file_name }}-bin.tar.gz dest={{ install_base_path }} owner={{ user }} group={{ group }} copy=no

# Changing permission to directory, setting `zookeeper_user` as the new owner.
- name: Change Directory Permissions.
  file: path={{ install_base_path }}/{{ zookeeper_file_name }}-bin owner={{ user }} group={{ group }} recurse=yes

# Creating Symbolic link.
- name: Creating a Symbolic Link in {{ install_base_path }}/zookeeper
  file: src={{ install_base_path }}/{{ zookeeper_file_name }}-bin path={{ soft_link_base_path }}/zookeeper state=link owner={{ user }} group={{ group }}

#-----------------------------
## Configure Zookeeper
#-----------------------------

# Creating a directory for Zookeeper.
- name: Creating a directory for Zookeeper.
  file: path={{ item }} owner={{ user }} group={{ group }} state=directory
  with_items:
    - "{{ data_store }}"
    - "{{ logging }}"

- name: Copying sample file zoo_sample.cfg to zoo.cfg
  copy: src={{ soft_link_base_path }}/zookeeper/conf/zoo_sample.cfg  dest={{ soft_link_base_path }}/zookeeper/conf/zoo.cfg owner={{ user }} group={{ group }} mode=0644

- name: Configuring zoo.cfg file
  lineinfile:
    path: "{{ soft_link_base_path }}/zookeeper/conf/zoo.cfg"
    line: "{{ item }}"
  with_items:
    - "# The number of snapshots to retain in dataDir\nautopurge.snapRetainCount=3"
    - "# Purge task interval in hours\nautopurge.purgeInterval=24"
    #- 'server.1=172.168.1.213:2888:3888'

- name: Adding Zookeeper Private IP address and port in zoo.cfg file
  lineinfile:
    path: "{{ soft_link_base_path }}/zookeeper/conf/zoo.cfg"
    line: "server.{{ item.0 + 1}}={{ item.1 }}:2888:3888"
  with_indexed_items:
    - "{{ private_ips.stdout_lines }}"

- lineinfile:
    path: "{{ soft_link_base_path }}/zookeeper/conf/zoo.cfg"
    line: "{{ item.line }}"
    regexp: '^{{ item.regexp }}'
  with_items:
    - { regexp: 'clientPort=', line: 'clientPort={{ port }}' }
    - { regexp: 'dataDir=', line: 'dataDir={{ data_store }}' }
    - { regexp: 'tickTime=', line: 'tickTime=2000' }
    - { regexp: 'nitLimit=', line: 'initLimit=10' }
    - { regexp: 'syncLimit=', line: 'syncLimit=5' }
    - { regexp: 'maxClientCnxns=', line: 'maxClientCnxns=60' }
    - { regexp: 'minSessionTimeout=', line: 'minSessionTimeout=4000' }
    - { regexp: 'maxSessionTimeout=', line: 'maxSessionTimeout=40000' }
    - { regexp: 'autopurge.snapRetainCount=', line: 'autopurge.snapRetainCount=3' }
    - { regexp: 'autopurge.purgeInteval=', line: 'autopurge.purgeInteval=1' }

## updating log4j.properties

- name: Removing old log4j.properties file
  file: path="{{ soft_link_base_path }}/zookeeper/conf/log4j.properties" state=absent

- name: Download log4j.properties from repo
  get_url: url={{ log4j_properties_url }} dest={{ soft_link_base_path }}/zookeeper/conf/log4j.properties mode=0644 validate_certs=no
#root@ip-172-31-80-84:~/kafka# chown zkadmin:zkadmin /opt/zookeeper/conf/*
#export ZOO_LOG_DIR=/mnt/data/zookeeper

- name: Configuring log4j.properties file
  lineinfile:
    path: "{{ soft_link_base_path }}/zookeeper/conf/log4j.properties"
    line: "{{ item.line }}"
    regexp: '^{{ item.regexp }}'
  with_items:
    - { regexp: 'zookeeper.log.dir=', line: 'zookeeper.log.dir={{ logging }}' }

##Zid - sotring Server ID in a file
#-----------------------------
- name: Create `myid` file
  file: path={{ data_store }}/myid state=touch mode=644  owner={{ user }} group={{ group }}

- name: Checking `myid` number
  shell: "myip=$(curl http://169.254.169.254/latest/meta-data/local-ipv4); grep $myip /opt/zookeeper/conf/zoo.cfg |grep server|cut -d '=' -f 1|cut -d '.' -f 2"
  register: MYID

- name: Initializing `myid` File for Zookeeper
  copy:
    content: '{{ MYID.stdout }}'
    dest: '{{ data_store }}/myid'

# Starting Zookeeper Service.
- name: Starting Zookeeper Server.
  command: chdir={{ logging }} bash {{ soft_link_base_path }}/zookeeper/bin/zkServer.sh start
